{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","SignIn","setWantToSignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","process","SignOut","currentUser","signOut","ChatRoom","useAuthState","user","dummy","useRef","messagesRef","collection","query","orderBy","limit","Number","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","isOwnerClass","src","App","wantToSignIn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0a21c080.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDjpYw7zlHeUwwADKXAffp8FwLyaVwoDSA\",\n  authDomain: \"pubchat-8d240.firebaseapp.com\",\n  databaseURL: \"https://pubchat-8d240-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"pubchat-8d240\",\n  storageBucket: \"pubchat-8d240.appspot.com\",\n  messagingSenderId: \"447629372841\",\n  appId: \"1:447629372841:web:fdf71454868b804bfb68b8\",\n  measurementId: \"G-PTR442H45G\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n  const [wantToSignIn, setWantToSignIn] = useState(false);\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>{process.env.REACT_APP_TITLE}</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {(wantToSignIn && !user) ? <SignIn setWantToSignIn={setWantToSignIn} /> : <ChatRoom setWantToSignIn={setWantToSignIn}/>}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn({setWantToSignIn}) {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>I want to send a message to {process.env.REACT_APP_OWNER}</button>\n      <br />\n      <button className=\"sign-in-no\" onClick={() => {setWantToSignIn(false) }}>\n        No, I am here just to see {process.env.REACT_APP_OWNER}'s chat\n      </button>\n      <br /><br />\n      <h2 className=\"warning\">{process.env.REACT_APP_DESCRIPTION}</h2>\n      <p className=\"warning\">Maintained by <b>{process.env.REACT_APP_OWNER}</b> & its completely safe üíóüòÄüíó </p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom({setWantToSignIn}) {\n  const [user] = useAuthState(auth);\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(Number(process.env.REACT_APP_MESSAGE_LIMIT));\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n    {\n      user ? <form onSubmit={sendMessage}>\n\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n        <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n      </form> : <button \n      onClick={()=>setWantToSignIn(true)}\n      className=\"alternate-form-submit\"\n      >Please Signin to send message</button>\n    }\n\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text = null, uid = null, photoURL } = props.message;\n\n  const messageClass = uid === auth?.currentUser?.uid ? 'sent' : 'received';\n  const isOwnerClass = process.env.REACT_APP_OWNER_KEY == photoURL ? 'owner' : 'others'\n\n  return (<>\n    <div className={`message ${messageClass} ${isOwnerClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}